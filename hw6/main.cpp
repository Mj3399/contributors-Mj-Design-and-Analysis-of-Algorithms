//////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE

#include "student_code_6.h"

#include <string>
#include <vector>
#include "test_framework.h"

const char* smallDataset = "small_problem_set_6.in";
const char* largeDataset = "large_problem_set_6.in";

const char *helpMsg = 
   "Please, indicate which problem set to use.\n\n"
   "For small problem set,"
      " type: ./main small\n"
   "For large problem set, type:"
      " ./main large\n";

const char *strNotice = 
   "##################################\n"
   "# Do not edit this file!\n"
   "##################################\n";

constexpr int problem_set_id = 6;

struct ProblemN6 : public TestFramework::BasicProblem
{
   std::vector<int> north;
   std::vector<int> west;
};

int SafeFindMaxProfit (const std::vector<int>& north, const std::vector<int>& west)
{
   TestFramework::ExitIfConditionFails (north.size() == west.size(), 
   "Invalid data. Arrays 'north' and 'west' must have the same size.");

   return FindMaxProfit (north, west);
}

int main(int argc, char *argv[])
{
   using namespace TestFramework;

   static_assert(
      GetTestFrameworkVersion() == 8,
      "TestFramework version 8 is required."
      "Please, update test_framework.h.");

   if ((argc != 2) && (argc != 3)) 
   {
       std::cout << helpMsg;
   }

   std::string firstArg(DefaultProblemSet());

   if (argc >= 2) 
   {
      firstArg = argv[1];
   }
   else 
   {
      std::cout << "\nUsing the default problem set: "
                << firstArg;
   }

   ExitIfConditionFails((firstArg == "small") || 
                        (firstArg == "large"),
                         "Unknown problem set.");

   bool bSmallDataset = (firstArg == "small");

   std::cout << std::endl << "Problem set #" 
             << problem_set_id << ". ";

   ProblemSetHeader header;
   RecordAdapter<ProblemSetHeader> psAdapter(header);
   AddDefaultProblemSetColumns(psAdapter);

   std::vector<ProblemN6> problems;
   TableAdapter<ProblemN6> prAdapter(problems);
   AddDefaultProblemColumns(prAdapter);

   AddColumn<ProblemN6>(prAdapter, "north",
                        &ProblemN6::north);

   AddColumn<ProblemN6>(prAdapter, "west",
                        &ProblemN6::west);


   BasicYamlParser parser(
       dynamic_cast<ITable*>(&psAdapter),
       dynamic_cast<ITable*>(&prAdapter));

   const char* inputFilename = bSmallDataset ?
                       smallDataset : largeDataset;
   std::cout << "File: " << inputFilename << ".\n";

   parser.ParseFile(inputFilename, true);
   PreprocessProblemSet(problem_set_id, problems, 
                        header);

   for (int i = 0; i < problems.size(); ++i)
   {
      auto& theProblem = problems[i];
      theProblem.student_answer = 
                SafeFindMaxProfit (theProblem.north,
                                   theProblem.west);
   }

   ProcessResults(problems, header);

   std::cout << "Don't forget to submit your "
                "source code on Canvas.";
    
   std::cout << "\nRunning time: " << header.time 
             << "ms";
    
   std::cout << std::endl << std::endl;
   std::cout << std::endl << std::endl;

   if (argc == 3)
   {
      const char * outputFilename = argv[2];
      std::cout << "Generating a report. ";
      std::cout << "The report is saved in file '" 
                << outputFilename << "'.\n";
       
      TableAdapter<ProblemN6> prOutAdapter(problems);
      AddDefaultProblemColumnsForOutput(prOutAdapter);

      WriteTableToFile(outputFilename, &prOutAdapter,
                       &psAdapter, true, strNotice);
   }

   return 0;
}
