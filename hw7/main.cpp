//////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE

#include "student_code_7.h"

#include <string>
#include <vector>
#include "test_framework.h"

const char* smallDataset = "small_problem_set_7.in";
const char* largeDataset = "large_problem_set_7.in";

const char *helpMsg =
   "Please, indicate which problem set to use.\n\n"
   "For small problem set,"
      " type: ./main small\n"
   "For large problem set, type:"
      " ./main large\n";

const char *strNotice =
   "##################################\n"
   "# Do not edit this file!\n"
   "##################################\n";

constexpr int problem_set_id = 7;

struct ProblemN7: public TestFramework::BasicProblem
{
   std::vector<int> rect_x1;
   std::vector<int> rect_x2;
   std::vector<int> rect_y1;
   std::vector<int> rect_y2;
   std::vector<int> rect_cost;
   std::vector<int> points_x;
   std::vector<int> points_y;
   std::vector<int> points_value;
};

int FindBestRectangle(const std::vector<int>& rect_x1, 
                      const std::vector<int>& rect_x2, 
                      const std::vector<int>& rect_y1, 
                      const std::vector<int>& rect_y2,
                      const std::vector<int>& rect_cost,
                      const std::vector<int>& points_x,
                      const std::vector<int>& points_y,
                      const std::vector<int>& points_value)
{
   int nRectangles = rect_x1.size();
   int nPoints = points_x.size();

   TestFramework::ExitIfConditionFails(
      (nRectangles == rect_x2.size()) ||
      (nRectangles == rect_y1.size()) ||
      (nRectangles == rect_y2.size()) ||
      (nRectangles == rect_cost.size()),
      "Corrupted data set,");

   TestFramework::ExitIfConditionFails(
      (nPoints == points_y.size()) ||
      (nPoints == points_value.size()),
      "Corrupted data set,");

   std::vector<Lot> lots;
   std::vector<GoldMine> goldMines;

   lots.reserve(nRectangles);
   goldMines.reserve(nPoints);


   for (int i = 0 ; i < nRectangles; ++i)
   {
      Lot lot = {rect_x1[i], rect_x2[i], rect_y1[i],
                 rect_y2[i], rect_cost[i]};

      lots.push_back(lot);
   }

   for (int j = 0; j < nPoints; ++j)
   {
      GoldMine goldMine = {points_x[j], points_y[j],
                           points_value[j]};

      goldMines.push_back(goldMine);
   }

   return FindBestLot(lots, goldMines);
}

int main(int argc, char *argv[])
{
   using namespace TestFramework;

   static_assert(
      GetTestFrameworkVersion() == 8,
      "TestFramework version 8 is required."
      "Please, update test_framework.h.");

   if ((argc != 2) && (argc != 3))
   {
       std::cout << helpMsg;
   }

   std::string firstArg(DefaultProblemSet());

   if (argc >= 2)
   {
      firstArg = argv[1];
   }
   else
   {
      std::cout << "\nUsing the default problem set: "
                << firstArg;
   }

   ExitIfConditionFails((firstArg == "small") ||
                        (firstArg == "large"),
                         "Unknown problem set.");

   bool bSmallDataset = (firstArg == "small");

   std::cout << std::endl << "Problem set #"
             << problem_set_id << ". ";

   ProblemSetHeader header;
   RecordAdapter<ProblemSetHeader> psAdapter(header);
   AddDefaultProblemSetColumns(psAdapter);

   std::vector<ProblemN7> problems;
   TableAdapter<ProblemN7> prAdapter(problems);
   AddDefaultProblemColumns(prAdapter);

   AddColumn<ProblemN7>(prAdapter, "rect_x1", &ProblemN7::rect_x1);
   AddColumn<ProblemN7>(prAdapter, "rect_x2", &ProblemN7::rect_x2);
   AddColumn<ProblemN7>(prAdapter, "rect_y1", &ProblemN7::rect_y1);
   AddColumn<ProblemN7>(prAdapter, "rect_y2", &ProblemN7::rect_y2);
   AddColumn<ProblemN7>(prAdapter, "rect_cost", &ProblemN7::rect_cost);
   AddColumn<ProblemN7>(prAdapter, "points_x", &ProblemN7::points_x);
   AddColumn<ProblemN7>(prAdapter, "points_y", &ProblemN7::points_y);
   AddColumn<ProblemN7>(prAdapter, "points_value", &ProblemN7::points_value);

   BasicYamlParser parser(dynamic_cast<ITable*>(&psAdapter),
                          dynamic_cast<ITable*>(&prAdapter));

   const char* inputFilename = bSmallDataset ?
                               smallDataset : largeDataset;

   std::cout << "File: " << inputFilename << ".\n";

   parser.ParseFile(inputFilename, true);
   PreprocessProblemSet(problem_set_id, problems, header);

   for (int i = 0; i < problems.size(); ++i)
   {
      auto& theProblem = problems[i];
      theProblem.student_answer = FindBestRectangle(theProblem.rect_x1, theProblem.rect_x2, theProblem.rect_y1, theProblem.rect_y2, theProblem.rect_cost, theProblem.points_x, theProblem.points_y, theProblem.points_value);
   }

   ProcessResults(problems, header);

   std::cout << "Don't forget to submit your "
                "source code on Canvas.";

   std::cout << "\nRunning time: " << header.time
             << "ms";

   std::cout << std::endl << std::endl;
   std::cout << std::endl << std::endl;

   if (argc == 3)
   {
      const char * outputFilename = argv[2];
      std::cout << "Generating a report. ";
      std::cout << "The report is saved in file '"
                << outputFilename << "'.\n";

      TableAdapter<ProblemN7> prOutAdapter(problems);
      AddDefaultProblemColumnsForOutput(prOutAdapter);

      WriteTableToFile(outputFilename, &prOutAdapter,
                       &psAdapter, true, strNotice);
   }

   return 0;
}