//////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE

#include "student_code_5.h"


#include <string>
#include <vector>
#include "test_framework.h"

const char* smallDataset = "small_problem_set_5.in";
const char* largeDataset = "large_problem_set_5.in";

const char *helpMsg = 
   "Please, indicate which problem set to use.\n\n"
   "For small problem set,"
      " type: ./main small\n"
   "For large problem set, type:"
      " ./main large\n";

const char *strNotice = 
   "##################################\n"
   "# Do not edit this file!\n"
   "##################################\n";

constexpr int problem_set_id = 5;

struct ProblemN5: public TestFramework::BasicProblem
{
   int guestCount;
   std::vector<int> packageSizes;
   std::vector<int> packageCosts;
};

int MinimumPrice(int guestCount,
                 const std::vector<int>& packageSizes, 
                 const std::vector<int>& packageCosts)
{
   int nSize = packageCosts.size();
   TestFramework::ExitIfConditionFails(
       nSize == packageSizes.size(),
       "Invalid input file #package costs"
       "!= #package sizes.");   

   std::vector<Package> packages;
   packages.reserve(nSize);

   for (int i = 0; i < nSize; ++i)
   {
      Package newPackage = 
              {packageCosts[i], packageSizes[i]};

      //check that the count is positive
      TestFramework::ExitIfConditionFails(
          (newPackage.size > 0),
          "Cupcake count must be positive.");

      packages.push_back(newPackage);
   }

   return MinimumPrice(guestCount, packages);
}

int main(int argc, char *argv[])
{
   using namespace TestFramework;

   static_assert(
      GetTestFrameworkVersion() == 8,
      "TestFramework version 8 is required."
      "Please, update test_framework.h.");

   if ((argc != 2) && (argc != 3)) 
   {
       std::cout << helpMsg;
   }

   std::string firstArg(DefaultProblemSet());

   if (argc >= 2) 
   {
      firstArg = argv[1];
   }
   else 
   {
      std::cout << "\nUsing the default problem set: "
                << firstArg;
   }

   ExitIfConditionFails((firstArg == "small") || 
                        (firstArg == "large"),
                         "Unknown problem set.");

   bool bSmallDataset = (firstArg == "small");

   std::cout << std::endl << "Problem set #" 
             << problem_set_id << ". ";

   ProblemSetHeader header;
   RecordAdapter<ProblemSetHeader> psAdapter(header);
   AddDefaultProblemSetColumns(psAdapter);

   std::vector<ProblemN5> problems;
   TableAdapter<ProblemN5> prAdapter(problems);
   AddDefaultProblemColumns(prAdapter);

   AddColumn<ProblemN5>(prAdapter, "guestCount",
                        &ProblemN5::guestCount);

   AddColumn<ProblemN5>(prAdapter, 
                        "packageSizes", &ProblemN5::packageSizes);

   AddColumn<ProblemN5>(prAdapter,
                        "packageCosts", &ProblemN5::packageCosts);

   BasicYamlParser parser(
       dynamic_cast<ITable*>(&psAdapter),
       dynamic_cast<ITable*>(&prAdapter));

   const char* inputFilename = bSmallDataset ?
                       smallDataset : largeDataset;
   std::cout << "File: " << inputFilename << ".\n";

   parser.ParseFile(inputFilename, true);
   PreprocessProblemSet(problem_set_id, problems, 
                        header);

   for (int i = 0; i < problems.size(); ++i)
   {
      auto& theProblem = problems[i];
      theProblem.student_answer = 
                MinimumPrice(theProblem.guestCount,
                             theProblem.packageSizes,
                             theProblem.packageCosts);
   }

   ProcessResults(problems, header);

   std::cout << "Don't forget to submit your "
                "source code on Canvas.";
    
   std::cout << "\nRunning time: " << header.time 
             << "ms";
    
   std::cout << std::endl << std::endl;
   std::cout << std::endl << std::endl;

   if (argc == 3)
   {
      const char * outputFilename = argv[2];
      std::cout << "Generating a report. ";
      std::cout << "The report is saved in file '" 
                << outputFilename << "'.\n";
       
      TableAdapter<ProblemN5> prOutAdapter(problems);
      AddDefaultProblemColumnsForOutput(prOutAdapter);

      WriteTableToFile(outputFilename, &prOutAdapter,
                       &psAdapter, true, strNotice);
   }

   return 0;
}
